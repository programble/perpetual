#!/usr/bin/env ruby

require 'set'

class BuildConfig
  attr_accessor :output, :cc

  def initialize
    @cflags = []
    @ldflags = []
  end

  def to_s
    [
      "OUTPUT := #{@output}",
      "CC := #{@cc}",
      "CFLAGS := #{@cflags.join(' ')}",
      "LDFLAGS := #{@ldflags.join(' ')}"
    ].join("\n")
  end

  def cflags(*a)
    @cflags.concat(a)
  end

  def ldflags(*a)
    @ldflags.concat(a)
  end

  def define(*a)
    cflags(*a.map {|x| "-D#{x}"})
  end

  def include(*a)
    cflags(*a.map {|x| "-I#{x}"})
  end

  def warning(*a)
    cflags(*a.map {|x| "-W#{x}"})
  end

  def link(*a)
    ldflags(*a.map {|x| "-l#{x}"})
  end
end

config = BuildConfig.new
features = Set.new ['default', 'compile', 'talloc', 'readline']

ARGV.each do |arg|
  if arg[0] == '+'
    features << arg[1..-1]
  elsif arg[0] == '-'
    features.delete(arg[1..-1])
  elsif arg =~ /^(\w+=)(.+)/
    config.send($1, $2)
  end
end

features.each do |f|
  case f
  when 'default'
    config.output ||= 'perpetual'
    config.cc ||= 'clang'
    config.cflags '-std=c99', '-MMD'
    config.define '_BSD_SOURCE'
    config.include 'include/'
    config.warning 'all', 'extra'

  when 'compile'
    config.cflags '-c'

  when 'release'
    config.define 'NDEBUG'

  when 'debug'
    config.cflags '-ggdb', '-O0'
    config.define 'DEBUG'

  when 'readline'
    config.define 'HAVE_READLINE'
    config.link 'readline'

  when 'talloc'
    config.cflags %x[pkg-config --cflags talloc].strip
    config.ldflags %x[pkg-config --libs talloc].strip

  end
end

open('config.mk', 'w') do |f|
  f.puts "# Generated by #{$0} #{ARGV.join(' ')}"
  f.puts "# Do not edit this file manually"
  f.write(config.to_s)
end
